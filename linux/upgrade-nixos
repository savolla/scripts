#!/usr/bin/env bash

# Define the path to the lock file
LOCK_FILE="/tmp/upgrade-nixos.lock"
NUM_GENERATIONS_TO_KEEP=50

# Check if the lock file already exists
if [ -e "$LOCK_FILE" ]; then
  echo "Script is already running."
  notify-send -r 27072 -i $ICON_DIR/error.svg "upgrade-nixos" "ERROR: script is already running"
  exit 1
fi

# Create the lock file
touch "$LOCK_FILE"

# Add a trap to delete the lock file on exit (even if the script fails)
trap "rm -f $LOCK_FILE" EXIT

PATH_TO_NIXOS_CONFIG="$HOME/project/environ/vm-nixos/configuration.nix"

notify-send -r 27072 "upgrade-nixos" "upgrade process started"
sudo nix-channel --update
CURRENT_DATE="$(date +'%Y-%m-%d')"
sudo NIXOS_LABEL="AFTER-UPGRADE-$CURRENT_DATE" nixos-rebuild switch --upgrade -I nixos-config="${PATH_TO_NIXOS_CONFIG}"

# stage 1: upgrade
echo "[INFO] entering stage 1: upgrade"
if [[ "$?" -eq 0 ]]; then
  notify-send -r 27072 -i $ICON_DIR/ok.svg "upgrade-nixos" "upgrade successfull!"
else
  notify-send -r 27072 -i $ICON_DIR/error.svg -u critical "upgrade-nixos" "upgrade failed!"
  exit
fi
echo "[INFO] exiting stage 1: upgrade"

# # stage 2: collect garbage
echo "[INFO] entering stage 2: collect garbage"

# keep only 10 generations
pkexec nix-env --profile /nix/var/nix/profiles/system --delete-generations +"$NUM_GENERATIONS_TO_KEEP"
echo "[INFO] entering stage 2.1: virus scan"
pkexec virus-scan
echo "[INFO] exiting stage 2.1: virus scan"

echo "[INFO] entering stage 2.2: cache clean"
# go clean -modcache
# go clean -cache
# cargo clean -Z gc
# pnpm store prune --force
rm -rf "$HOME"/.gradle/caches
echo "[INFO] exiting stage 2.2: cache clean"

notify-send -r 27072 "upgrade-nixos" "collecting garbage"
echo "[INFO] entering stage 2.3: nix-store --gc"
pkexec nix-store --gc # collect garbage
echo "[INFO] exiting stage 2.3: nix-store --gc"

if [[ "$?" -eq 0 ]]; then
  notify-send -r 27072 -i $ICON_DIR/ok.svg "upgrade-nixos" "garbage collection successfull"
else
  notify-send -r 27072 -i $ICON_DIR/error.svg -u critical "upgrade-nixos" "garbage collection failed!"
  exit
fi

# stage 3: optimise store
notify-send -r 27072 "upgrade-nixos" "optimizing /nix/store"
echo "[INFO] entering stage 3: nix store optimise"
pkexec nix-store --optimise # create hard links for deps
echo "[INFO] exiting stage 3: nix store optimise"

if [[ "$?" -eq 0 ]]; then
  notify-send -r 27072 -i $ICON_DIR/ok.svg "upgrade-nixos" "optimization successfull"
else
  notify-send -r 27072 -i $ICON_DIR/error.svg -u critical "upgrade-nixos" "optimization failed!"
  exit
fi

notify-send -r 27072 -i $ICON_DIR/ok.svg -t 0 "upgrade-nixos" "all operations are finished successfuly"

# stage 4 update all container images

# # I commented this because I already removingall containers when I exit them. I have no dangling images or containers
# pkexec systemctl start docker.service
# docker system prune -a -f  # Removes all unused containers, networks, images (both dangling and unreferenced)
# pkexec systemctl stop docker.service
echo "[INFO] entering stage 4: docker container upgrade"
notify-send -r 27072 "upgrade-nixos" "updating all docker images"
"$HOME"/resource/tools/docker/open-webui/update
"$HOME"/resource/tools/docker/penpot/update
echo "[INFO] exiting stage 4: docker container upgrade"

# stage 5 update doom emacs
echo "[INFO] entering stage 5: doom emacs upgrade"
"$HOME"/.config/emacs/bin/doom upgrade
echo "[INFO] exiting stage 5: doom emacs upgrade"

# stage 6 pull latest changes of cloned repos
echo "[INFO] entering stage 6: git repos clone"
cd "$REPO_DIR" || exit

for repo in ./*; do
  cd "$repo" || exit
  echo "[INFO] pulling latest changes for $repo"
  git pull
  cd ..
done
echo "[INFO] exiting stage 6: git repos clone"
