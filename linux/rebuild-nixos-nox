#!/usr/bin/env bash

# Define the path to the lock file
LOCK_FILE="/tmp/rebuild-nixos.lock"

# Check if the lock file already exists
if [ -e "$LOCK_FILE" ]; then
  echo "Script is already running."
  notify-send -r 27072 -i "$ICONS_DIR"/error.svg "rebuild-nixos" "ERROR: script is already running"
  exit 1
fi

# Create the lock file
touch "$LOCK_FILE"

# Add a trap to delete the lock file on exit (even if the script fails)
trap "rm -f $LOCK_FILE" EXIT

PATH_TO_NIXOS_CONFIG="$HOME/project/environ/nixos/configuration.nix"

pkill -f screenkey
pkexec nixos-rebuild switch -I nixos-config="${PATH_TO_NIXOS_CONFIG}"
screenkey

if [[ "$?" -eq 0 ]]; then
  notify-send -r 27072 -i $ICONS_DIR/ok.svg -t 0 "rebuild-nixos" "rebuild successful!"
else
  notify-send -r 27072 -i $ICONS_DIR/error.svg -u critical "rebuild-nixos" "rebuild failed!"
  exit
fi

# collect garbage and optimise /nix/store
if [[ "$1" == "-f" || "$1" == "--full" ]]; then
  notify-send -r 27072 "rebuild-nixos" "collecting garbage"
  pkill -f screenkey
  pkexec nix-store --gc # collect garbage
  screenkey

  if [[ "$?" -eq 0 ]]; then
    notify-send -r 27072 -i $ICONS_DIR/ok.svg "rebuild-nixos" "garbage collection successfull"
  else
    notify-send -r 27072 -i $ICONS_DIR/error.svg -u critical "rebuild-nixos" "garbage collection failed!"
  fi

  # stage 3: optimise store
  notify-send -r 27072 "rebuild-nixos" "optimizing /nix/store"
  pkill -f screenkey
  pkexec nix-store --optimise # create hard links for deps
  screenkey

  if [[ "$?" -eq 0 ]]; then
    notify-send -r 27072 -i $ICONS_DIR/ok.svg "rebuild-nixos" "optimization successfull"
  else
    notify-send -r 27072 -i $ICONS_DIR/error.svg -u critical "rebuild-nixos" "optimization failed!"
  fi
fi
